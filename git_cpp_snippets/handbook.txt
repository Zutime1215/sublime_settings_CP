1.  auto it = find(array, end(array), item) - return the pointer of item from array.
	index = it - array / it - begin(array)


2.  bool present = binary_search(array, end(array), item) - return False/True. array must be sorted.
	auto it = lower_bound(array, end(array), item) - return pointer of an item which is greater than or 					equal item.
	auto it = upper_bound(array, end(array), item) - return pointer of an item which is greater than item.


3.  string.empty()  -  returns False/True. String empty or not.
	string1.append(string2) - same as string1 + string2
	string.length() - lentght of the string
	string.clear()  - clear all the content of the string 
	string1.compare(string2)  -  return 0 if string1=string2. else greater than or less than zero depend 					on the lexographical order.
	string.find("string")  -  return index of "string"
	string.erase(index, n) -  remove from index to n. n in an integer.


4.  for (int i=0;i<n;i++) {string[i]} 
    for (auto it = string.begin(); it != string.end() ;it++) {*it}
    for (auto i:string) {i}


5.  getline(cin, string)  -  string with white char input.
	cin.get()  -  To consume xtra enter after \n


6.  sort(array, end(array), compare)  -  sort from begin to end. "array" and "end(array)" are start and 					ending pointer. compare is a function which define how sort function work with two 						item. its a boolean type.


7.  vector<int> b(5, 10) - name of the vector is "b". 5 integer in 'b' and their value 10.
	vector<int> c(b.begin(), b.end()) - copy 'b' vector items to c.
	vector.push_back(n) - push 'n' to the end of the vector
	vector.size() - number of item in vector
	vector.capacity() - size of the vector
	vector.max_size() - max size the vector can be.
	vector.pop_back() - remove the last 
	vector.insert(it, item) - insert 'item' to the position iterator it)
	vector.erase(it1, it2) - remove items from iterator_it1 to it2
	vector.resize(n) - increase or decrease the capacity of vector
	vector.clear() - remove all the items from vector
	vector.empty() - return True/False. empty or not
	vector.front() - 1st item of the vector
	vector.back() - last item of the vector


8.  list<int> l - Doubly Linked List
	list.push_front(n), list.push_back(n), list.pop_front(), list.pop_back()
	list.sort() - For sorting.
	list.reverse() - For Reverse
	list.remove(item) - remove all the 'item' item from list
	list.insert(it, item) - insert "item" in a specific iterate it.
	list.front(), list.back()
	list.begin(), list.end()


9. 	stack<int> l - Stack container
	stack.push(item), stack.pop()
	stack.top() - return top element
	stack.empty() - Empty or not. False/True


10. queue<int> l;
	queue.push(item), queue.pop()
	queue.front(), queue.back()
	queue.empty()


11. priority_queue<int> l; - made with heap. Max priority queue.
	priority_queue<int, vector<int>, greater<int>> - min priority_queue

	priority_queue.push(item), priority_queue.pop()
	priority_queue.top(), priority_queue.expty()
	

12. 